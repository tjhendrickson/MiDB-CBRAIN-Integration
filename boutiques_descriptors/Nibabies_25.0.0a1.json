{
    "name": "nibabies",
    "description": "NiBabies is an open-source software pipeline designed to process anatomical and functional magnetic resonance imaging data.",
    "tool-version": "25.0.0a1",
    "schema-version": "0.5",
    "url": "https://nibabies.readthedocs.io/",
    "command-line": "true [DERIVATIVES_PREFIX]; nibabies [SUBJECT_DIR] [OUTPUT_DIR] participant --skip_bids_validation [TASK_ID] [SESSION_ID] [ECHO_IDX] [ANAT_DERIVATIVES_PATH] --nthreads 4 --omp-nthreads 4 --mem_mb 30000 [USE_PLUGIN] [ANAT_ONLY] [BOILERPLATE_ONLY] [MD_ONLY_BOILERPLATE] [VERBOSE] [IGNORE] [LONGITUDINAL] [OUTPUT_SPACES] [ME_OUTPUT_ECHOS] [BOLD2ANAT_INIT] [BOLD2ANAT_DOF] [FORCE_BBR] [FORCE_NO_BBR] [MEDIAL_SURFACE_NAN] [SLICE_TIME_REF] [DUMMY_SCANS] [RANDOM_SEED] [RETURN_ALL_COMPONENTS] [FD_SPIKE_THRESHOLD] [DVARS_SPIKE_THRESHOLD] [SKULL_STRIP_TEMPLATE] [SKULL_STRIP_FIXED_SEED] [SKULL_STRIP_ANAT] [FMAP_BSPLINE] [FMAP_NO_DEMEAN] [USE_SYN_SDC] [FORCE_SYN] [FS_LICENSE_FILE] [NO_SUBMM_RECON] [CIFTI_OUTPUT] [FS_NO_RECONALL] --work-dir work [RESOURCE_MONITOR] [REPORTS_ONLY] [CONFIG_FILE] [WRITE_GRAPH] [STOP_ON_FIRST_CRASH] [NOTRACK] [DEBUG] [SLOPPY] [AGE_MONTHS] [SEGMENTATION_ATLASES_DIR] [FD_RADIUS] [CABINET_OUTPUT] [DERIV_FILTER_FILE] [FORCE_RECONALL] [PROJECT_GOODVOXELS] [SURFACE_RECON_METHOD] [NORM_CSF] [MULTI_STEP_REG]",
    "container-image": {
        "image": "nipreps/nibabies:25.0.0a1",
        "index": "docker://",
        "type": "singularity"
    },
    "groups": [
    {
        "description": "Options for filtering BIDS queries.",
        "id": "BIDS_filtering_options",
        "members": [
            "task_id",
            "echo_idx",
            "anat_derivatives"
        ],
        "name": "BIDS Filtering Options"
    },
    {
        "description": "Options to handle performance",
        "id": "performance_options",
        "members": [
            "use_plugin",
            "anat_only",
            "boilerplate_only",
            "md_only_boilerplate",
            "verbose"
         ],
        "name": "Performance Handling"
      },
      {
        "description": "Workflow Configuration Options",
        "id": "workflow_configuration",
        "members": [
            "ignore",
            "longitudinal",
            "output_spaces",
            "me_output_echos",
            "bold2anat_init",
            "bold2anat_dof",
            "force_bbr",
            "force_no_bbr",
            "medial_surface_nan",
            "slice_time_ref",
            "dummy_scans",
            "random_seed",
            "force_reconall"
         ],
        "name": "Workflow Config"
      },
      {
        "description": "Specific options for estimating confounds",
        "id": "confound_estimates",
        "members": [
            "return_all_components",
            "fd_spike_threshold",
            "dvars_spike_threshold"
         ],
        "name": "confound options"
      },
      {
        "description": "Specific options for ANTs registrations",
        "id": "ANTs_options",
        "members": [
            "skull_strip_template",
            "skull_strip_fixed_seed",
            "skull_strip_anat"
         ],
        "name": "ANTs options"
      },
      {
        "description": "Specific options for handling fieldmaps",
        "id": "fieldmap_options",
        "members": [
            "fmap_bspline",
            "fmap_no_demean"
         ],
        "name": "fieldmap options"
      },
      {
        "description": "Specific options for SyN distortion correction",
        "id": "SyN_options",
        "members": [
            "use_syn_sdc",
            "force_syn"
         ],
        "name": "SyN options"
      },
      {
        "description": "Specific options for FreeSurfer preprocessing",
        "id": "FreeSurfer_options",
        "members": [
            "fs_license_file"         ],
        "name": "FreeSurfer Options"
      },
      {
        "description": "Surface preprocessing options",
        "id": "Surface_options",
        "members": [
            "no_submm_recon",
            "cifti_output",
            "fs_no_reconall"
         ],
        "name": "Surface Options"
      },
      {
        "description": "Other options",
        "id": "Other_options",
        "members": [
            "resource_monitor",
            "reports_only",
            "config_file",
            "write_graph",
            "stop_on_first_crash",
            "notrack",
            "debug",
            "sloppy"
         ],
        "name": "Other"
      },
      {
        "description": "NiBabies specific options",
        "id": "NiBabies_options",
        "members": [
            "age_months",
            "segmentation_atlases_dir",
            "fd_radius",
            "deriv_filter_file"
         ],
        "name": "NiBabies options"
      },
      {
        "id": "segmentation_dir",
        "name": "Segmentation directory content",
        "description": "File(s) to put in the precomputed folder for --segmentation-dir option",
        "members": [
            "cabinet_output",
            "cabinet_output_json"
        ],
        "all-or-none": true
      }
    ],
    "inputs": [
        {
            "description": "Subject folder for BIDS (folders name should be sub-XXXXX).",
            "id": "subject_dir",
            "name": "subject_dir",
            "optional": false,
            "type": "File",
            "value-key": "[SUBJECT_DIR]"
          },
        {
            "description": "The name of the output for the outcomes of preprocessing and visual reports. When processing is ran via CBRAIN only subject-specific files/folders will be saved, so the naming of the output folder will not influence the final naming/destination of files/folders.",
            "id": "output_dir_name",
            "name": "output_dir_name",
            "optional": false,
            "type": "String",
            "value-key": "[OUTPUT_DIR]"
        },
        {
            "command-line-flag": "-t",
            "id": "task_id",
            "name": "task_id",
            "description": "Select a specific task to be processed",
            "optional": true,
            "type": "String",
            "value-key": "[TASK_ID]"
        },
        {
            "command-line-flag": "--session-id",
            "id": "session_id",
            "name": "session_id",
            "description": "a space delimited list of session identifiers or a single identifier",
            "optional": true,
            "type": "String",
            "value-key": "[SESSION_ID]"
        },
        {
            "command-line-flag": "--echo-idx",
            "id": "echo_idx",
            "name": "echo_idx",
            "description": "Select a specific echo to be processed in a multiecho series",
            "optional": true,
            "type": "Number",
            "value-key": "[ECHO_IDX]"
        },
        {
            "command-line-flag": "--anat-derivatives",
            "id": "anat_derivatives",
            "name": "anat_derivatives",
            "description": "Reuse the anatomical derivatives from another NiBabies run or calculated with an alternative processing tool (NOT RECOMMENDED).",
            "optional": true,
            "type": "File",
            "value-key": "[ANAT_DERIVATIVES_PATH]"
        },
        {
            "command-line-flag": "--use-plugin",
            "id": "use_plugin",
            "name": "nipype plugin file",
            "description": "Nipype plugin configuration file.",
            "optional": true,
            "type": "File",
            "value-key": "[USE_PLUGIN]"
        },
        {
            "command-line-flag": "--anat-only",
            "id": "anat_only",
            "name": "anat only",
            "description": "Run anatomical workflows only.",
            "optional": true,
            "type": "Flag",
            "value-key": "[ANAT_ONLY]"
        },
        {
            "command-line-flag": "--boilerplate_only",
            "id": "boilerplate_only",
            "name": "boilerplate_only",
            "description": "Generate boilerplate only.",
            "optional": true,
            "type": "Flag",
            "value-key": "[BOILERPLATE_ONLY]"
        },
        {
            "command-line-flag": "--md-only-boilerplate",
            "id": "md_only_boilerplate",
            "name": "md_only_boilerplate",
            "description": "Skip generation of HTML and LaTeX formatted citation with pandoc.",
            "optional": true,
            "type": "Flag",
            "value-key": "[MD_ONLY_BOILERPLATE]"
        },
        {
            "command-line-flag": "-vvv",
            "id": "verbose",
            "name": "verbose",
            "description": "Increases log verbosity for each occurence (-vvv).",
            "optional": true,
            "type": "Flag",
            "value-key": "[VERBOSE]"
        },
        {
            "command-line-flag": "--ignore",
            "id": "ignore",
            "name": "ignore",
            "description": "Ignore selected aspects of the input dataset to disable corresponding parts of the workflow. This will show up on the command line as a space delimited list.",
            "optional": true,
            "type": "String",
            "list": true,
            "value-key": "[IGNORE]",
            "value-choices": [
                "fieldmaps",
                "slicetiming",
                "sbref",
                "t2w",
                "flair"
            ]
        },
        {
            "command-line-flag": "--longitudinal",
            "id": "longitudinal",
            "name": "longitudinal",
            "description": "Treat dataset as longitudinal - may increase runtime.",
            "optional": true,
            "type": "Flag",
            "value-key": "[LONGITUDINAL]"
        },
        {
            "command-line-flag": "--output-spaces",
            "id": "output_spaces",
            "name": "output_spaces",
            "description": "Standard and non-standard spaces to resample anatomical and functional images to. Standard spaces may be specified by the form <SPACE>[:cohort-<label>][:res-<resolution>][...], where <SPACE> is a keyword designating a spatial reference, and may be followed by optional, colon-separated parameters. Non-standard spaces imply specific orientations and sampling grids. Important to note, the res-* modifier does not define the resolution used for the spatial normalization. To generate no BOLD outputs, use this option without specifying any spatial references For further details, please check out https://fmriprep.readthedocs.io/en/latest/spaces.html",
            "optional": true,
            "type": "String",
            "value-key": "[OUTPUT_SPACES]"
        },
        {
            "command-line-flag": "--me-output-echos",
            "id": "me_output_echos",
            "name": "me_output_echos",
            "description": "Output individual echo time series with slice, motion and susceptibility correction. Useful for further Tedana processing post-NiBabies.",
            "optional": true,
            "type": "Flag",
            "value-key": "[ME_OUTPUT_ECHOS]"
        },
        {
            "command-line-flag": "--bold2anat-init",
            "id": "bold2anat_init",
            "name": "bold2anat_init",
            "description": "Either 'register' to initialize volumes at center or 'header' to use the header information when coregistering BOLD to anat images.",
            "optional": true,
            "type": "String",
            "value-choices": [
                "register",
                "header"
            ],
            "value-key": "[BOLD2ANAT_INIT]"
        },
        {
            "command-line-flag": "--bold2anat-dof",
            "id": "bold2anat_dof",
            "name": "bold2anat_dof",
            "description": "Degrees of freedom when registering BOLD to anat images.",
            "optional": true,
            "type": "Number",
            "value-choices": [
                6,
                9,
                12
            ],
            "value-key": "[BOLD2ANAT_DOF]"
        },
        {
            "command-line-flag": "--force-bbr",
            "id": "force_bbr",
            "name": "force_bbr",
            "description": "Always use boundary-based registration (no goodness-of-fit checks)",
            "optional": true,
            "type": "Flag",
            "value-key": "[FORCE_BBR]"
        },
        {
            "command-line-flag": "--force-no-bbr",
            "id": "force_no_bbr",
            "name": "force_no_bbr",
            "description": "Do not use boundary-based registration (no goodness-of-fit checks).",
            "optional": true,
            "type": "Flag",
            "value-key": "[FORCE_NO_BBR]"
        },
        {
            "command-line-flag": "--medial-surface-nan",
            "id": "medial_surface_nan",
            "name": "medial_surface_nan",
            "description": "Replace medial wall values with NaNs on functional GIFTI files. Only performed for GIFTI files mapped to a freesurfer subject (fsaverage or fsnative).",
            "optional": true,
            "type": "Flag",
            "value-key": "[MEDIAL_SURFACE_NAN]"
        },
        {
            "command-line-flag": "--slice-time-ref",
            "id": "slice_time_ref",
            "name": "slice_time_ref",
            "description": "The time of the reference slice to correct BOLD values to, as a fraction acquisition time. 0 indicates the start, 0.5 the midpoint, and 1 the end of acquisition. The alias start corresponds to 0, and middle to 0.5.",
            "optional": true,
            "type": "Number",
            "value-key": "[SLICE_TIME_REF]"
        },
        {
            "command-line-flag": "--dummy-scans",
            "id": "dummy_scans",
            "name": "dummy_scans",
            "description": "Number of non steady state volumes.",
            "optional": true,
            "type": "Number",
            "value-key": "[DUMMY_SCANS]"
        },
        {
            "command-line-flag": "--random-seed",
            "id": "random_seed",
            "name": "random_seed",
            "description": "Initialize the random seed for the workflow.",
            "optional": true,
            "type": "Number",
            "value-key": "[RANDOM_SEED]"
        },
        {
            "command-line-flag": "--return-all-components",
            "id": "return_all_components",
            "name": "return_all_components",
            "description":"Include all components estimated in CompCor decomposition in the confounds file instead of only the components sufficient to explain 50 percent of BOLD variance in each CompCor mask.",
            "optional": true,
            "type": "Flag",
            "value-key": "[RETURN_ALL_COMPONENTS]"
        },
        {
            "command-line-flag": "--fd-spike-threshold",
            "id": "fd_spike_threshold",
            "name": "fd_spike_threshold",
            "description": "Threshold for flagging a frame as an outlier on the basis of framewise displacement.",
            "optional": true,
            "type": "Number",
            "value-key": "[FD_SPIKE_THRESHOLD]"
        },
        {
            "command-line-flag": "--dvars-spike-threshold",
            "id": "dvars_spike_threshold",
            "name": "dvars_skipe_threshold",
            "description": "Threshold for flagging a frame as an outlier on the basis of standardised DVARS.",
            "optional": true,
            "type": "Number",
            "value-key": "[DVARS_SPIKE_THRESHOLD]"
        },
        {
            "command-line-flag": "--skull-strip-template",
            "id": "skull_strip_template",
            "name": "skull_strip_template",
            "description": "Select a template for skull-stripping with antsBrainExtraction.",
            "optional": true,
            "type": "String",
            "value-key": "[SKULL_STRIP_TEMPLATE]",
            "value-choices": [
                "UNCInfant:cohort-1"
            ]
        },
        {
            "command-line-flag": "--skull-strip-fixed-seed",
            "id": "skull_strip_fixed_seed",
            "name": "skull_strip_fixed_seed",
            "description": "Do not use a random seed for skull-stripping - will ensure run-to-run replicability when used with -omp-nthreads 1 and matching -random-seed <int>",
            "optional": true,
            "type": "Number",
            "value-key": "[SKULL_STRIP_FIXED_SEED]"
        },
        {
            "command-line-flag": "--skull-strip-anat",
            "id": "skull_strip_anat",
            "name": "skull_strip_anat",
            "description": "Determiner for anatomical skull stripping ('force' ensures skull stripping, 'skip' ignores skull stripping, and 'auto' applies brain extraction based on the outcome of a heuristic to check whether the brain is already masked).",
            "optional": true,
            "type": "String",
            "value-choices": [
                "auto",
                "skip",
                "force"
            ],
            "value-key": "[SKULL_STRIP_ANAT]"
        },
        {
            "command-line-flag": "--fmap-bspline",
            "id": "fmap_bspline",
            "name": "fmap_bspline",
            "description": "Fit a B-Spline field using least-squares (experimental).",
            "optional": true,
            "type": "Flag",
            "value-key": "[FMAP_BSPLINE]"
        },
        {
            "command-line-flag": "--fmap-no-demean",
            "id": "fmap_no_demean",
            "name": "fmap_no_demean",
            "description": "Do not remove median (within mask) from fieldmap.",
            "optional": true,
            "type": "Flag",
            "value-key": "[FMAP_NO_DEMEAN]"
        },
        {
            "command-line-flag": "--use-syn-sdc",
            "id": "use_syn_sdc",
            "name": "use_syn_sdc",
            "description": "EXPERIMENTAL: Use fieldmap-free distortion correction",
            "optional": true,
            "type": "Flag",
            "value-key": "[USE_SYN_SDC]"
        },
        {
            "command-line-flag": "--force-syn",
            "id": "force_syn",
            "name": "force_syn",
            "description": "EXPERIMENTAL/TEMPORARY: Use SyN correction in addition to fieldmap correction, if available.",
            "optional": true,
            "type": "Flag",
            "value-key": "[FORCE_SYN]"
        },
        {
            "command-line-flag": "--fs-license-file",
            "id": "fs_license_file",
            "name": "fs_license_file",
            "description": "Path to FreeSurfer license key file. Get it (for free) by registering at https://surfer.nmr.mgh.harvard.edu/registration.html",
            "optional": true,
            "type": "File",
            "value-key": "[FS_LICENSE_FILE]"
        },
        {
            "command-line-flag": "--no-submm-recon",
            "id": "no_submm_recon",
            "name": "no_submm_recon",
            "description": "Disable sub-millimeter (hires) reconstruction",
            "optional": true,
            "type": "Flag",
            "value-key": "[NO_SUBMM_RECON]"
        },
        {
            "command-line-flag": "--cifti-output",
            "id": "cifti_output",
            "name": "cifti_output",
            "description": "Output preprocessed BOLD as a CIFTI dense timeseries. Optionally, the number of grayordinate can be specified (default is 91k, which equates to 2mm resolution). Possible choices 91k, 170k.",
            "optional": true,
            "type": "String",
            "value-choices": [
                "91k",
                "170k"
            ],
            "value-key": "[CIFTI_OUTPUT]"
        },
        {
            "command-line-flag": "--fs-no-reconall",
            "id": "fs_no_reconall",
            "name": "fs_no_reconall",
            "description": "Disable FreeSurfer surface preprocessing.",
            "optional": true,
            "type": "Flag",
            "value-key": "[FS_NO_RECONALL]"
        },
        {
            "command-line-flag": "--resource-monitor",
            "id": "resource_monitor",
            "name": "resource_monitor",
            "description": "Enable Nipype's resource monitoring to keep track of memory and CPU usage.",
            "optional": true,
            "type": "Flag",
            "value-key": "[RESOURCE_MONITOR]"
        },
        {
            "command-line-flag": "--reports-only",
            "id": "reports_only",
            "name": "reports_only",
            "description": "Only generate reports, don't run workflows. This will only rerun report aggregation, not reportlet generation for specific nodes.",
            "optional": true,
            "type": "Flag",
            "value-key": "[REPORTS_ONLY]"
        },
        {
            "command-line-flag": "--config-file",
            "id": "config_file",
            "name": "config_file",
            "description": "Use pre-generated configuration file. Values in file will be overridden by command-line arguments.",
            "optional": true,
            "type": "File",
            "value-key": "[CONFIG_FILE]"
        },
        {
            "command-line-flag": "--write-graph",
            "id": "write_graph",
            "name": "write_graph",
            "description": "Write workflow graph.",
            "optional": true,
            "type": "Flag",
            "value-key": "[WRITE_GRAPH]"
        },
        {
            "command-line-flag": "--stop-on-first-crash",
            "id": "stop_on_first_crash",
            "name": "stop_on_first_crash",
            "description": "Force stopping on first crash, even if a work directory was specified.",
            "optional": true,
            "type": "Flag",
            "value-key": "[STOP_ON_FIRST_CRASH]"
        },
        {
            "command-line-flag": "--notrack",
            "id": "notrack",
            "name": "notrack",
            "description": "Opt-out of sending tracking information of this run to the NiBabies developers. This information helps to improve NiBabies and provides an indicator of real world usage crucial for obtaining funding.",
            "optional": true,
            "type": "Flag",
            "value-key": "[NOTRACK]"
        },
        {
            "command-line-flag": "--debug",
            "id": "debug",
            "name": "debug",
            "description": "Debug mode(s) to enable. 'all' is alias for all available modes.",
            "optional": true,
            "type": "String",
            "value-key": "[DEBUG]",
            "value-choices": [
                "compcor",
                "registration",
                "fieldmaps",
                "all"
            ]
        },
        {
            "command-line-flag": "--sloppy",
            "id": "sloppy",
            "name": "sloppy",
            "description": "Use low-quality tools for speed - TESTING ONLY.",
            "optional": true,
            "type": "Flag",
            "value-key": "[SLOPPY]"
        },
        {
            "command-line-flag": "--age-months",
            "id": "age_months",
            "name": "age_months",
            "description": "Age in months. Using this flag is highly recommended.",
            "optional": true,
            "type": "Number",
            "value-key": "[AGE_MONTHS]"
        },
        {
            "command-line-flag": "--segmentation-atlases-dir",
            "id": "segmentation_atlases_dir",
            "name": "segmentation_atlases_dir",
            "description": "Directory containing precalculated segmentations to use for JointLabelFusion.",
            "optional": true,
            "type": "File",
            "value-key": "[SEGMENTATION_ATLASES_DIR]"
        },
        {
            "command-line-flag": "--fd-radius",
            "id": "fd_radius",
            "name": "fd_radius",
            "description": "Head radius in mm for framewise displacement calculation.",
            "optional": true,
            "type": "Number",
            "value-key": "[FD_RADIUS]"
        },
        {
            "command-line-flag": "--derivatives",
            "id": "cabinet_output",
            "name": "cabinet_output",
            "description": "FileCollection containing CABINET precomputed output.",
            "optional": true,
            "type": "File",
            "value-key": "[CABINET_OUTPUT]"
        },
        {
            "id": "cabinet_output_json",
            "name": "cabinet_output_json",
            "description": "The json descriptor of the CABINET precomputed output.",
            "optional": true,
            "type": "File"
        },
        {
            "command-line-flag": "--deriv-filter-file",
            "id": "deriv_filter_file",
            "name": "deriv_filter_file",
            "description": "A JSON file for customizing the derivatives queries.",
            "optional": true,
            "type": "File",
            "value-key": "[DERIV_FILTER_FILE]"
        },
        {
            "command-line-flag": "--force-reconall",
            "id": "force_reconall",
            "name": "force reconall",
            "description": "Force traditional FreeSurfer surface reconstruction.",
            "optional": true,
            "type": "Flag",
            "value-key": "[FORCE_RECONALL]"
        },
        {
            "command-line-flag": "--project-goodvoxels",
            "id": "project_goodvoxels",
            "name": "project_goodvoxels",
            "description": "Remove high variance voxels from surface projection.",
            "optional": true,
            "type": "Flag",
            "value-key": "[PROJECT_GOODVOXELS]"
        },
        {
            "command-line-flag": "--surface-recon-method",
            "id": "surface_recon_method",
            "name": "surface_recon_method",
            "description": "Method to use for surface reconstruction.",
            "optional": true,
            "type": "String",
            "value-key": "[SURFACE_RECON_METHOD]",
            "value-choices": [
                "infantfs",
                "freesurfer",
                "mcribs"
            ]
        },
        {
            "command-line-flag": "--norm-csf",
            "id": "norm_csf",
            "name": "norm_csf",
            "description": "Replace low intensity voxels in CSF mask with average.",
            "optional": true,
            "type": "Flag",
            "value-key": "[NORM_CSF]"
        },
        {
            "command-line-flag": "--multi-step-reg",
            "id": "multi_step_reg",
            "name": "multi_step_reg",
            "description": "For certain adult templates (MNI152NLin6Asym), perform two step registrations (native -> MNIInfant -> template) and concatenate into a single xfm.",
            "optional": true,
            "type": "Flag",
            "value-key": "[MULTI_STEP_REG]"
        },
        {
            "default-value": "derivatives/",
            "id": "derivatives_prefix",
            "name": "derivatives_prefix",
            "description": "Folders to put before the pipeline specific folder. By default this will look like DataProvider/derivatives/PipelineName, where pipeline name is specific to the current pipeline. The provided string must end in /",
            "optional": true,
            "type": "String",
            "value-key": "[DERIVATIVES_PREFIX]"
        }
    ],
    "output-files" : [{
        "id" : "nibabies_output_dir",
        "name" : "NiBabies Output Directory",
        "description" : "This is the directory where the nibabies outputs are to be stored.",
        "path-template" : "[OUTPUT_DIR]/[SUBJECT_DIR]",
        "optional" : false
    },
    {
        "id" : "freesurfer_output_dir",
        "name" : "FreeSurfer Output Directory",
        "description" : "This is the directory where the freesurfer-like outputs are to be stored.",
        "path-template" : "[OUTPUT_DIR]/sourcedata/freesurfer/[SUBJECT_DIR]*",
        "optional" : false
    },
    {
        "id" : "mcribs_output_dir",
        "name" : "MCRIBS Output Directory",
        "description" : "This is the directory where the mcribs outputs are to be stored.",
        "path-template" : "[OUTPUT_DIR]/sourcedata/mcribs/[SUBJECT_DIR]*",
        "optional" : false
    },
    {
        "id" : "nibabies_html_report",
        "name" : "nibabies html report",
        "description" : "This is the html report generated by nibabies.",
        "path-template" : "[OUTPUT_DIR]/[SUBJECT_DIR]*.html",
        "optional" : false
    }],
    "tags": {
        "application-type": ["bids"],
        "domain": ["neuroinformatics", "fmri", "infant"],
        "status": "example"
    },
    "suggested-resources": {
        "cpu-cores": 4,
        "ram": 60,
        "walltime-estimate": 72000
    },
    "custom": {
        "cbrain:readonly-input-files": true,
        "cbrain:author": "Erik Lee <leex6144@umn.edu>, Timothy Hendrickson <hendr522@umn.edu> and Natacha Beck <nbeck@mcin.ca>",
        "cbrain:allow_empty_strings": ["derivatives_prefix"],
        "cbrain:override-string-input-ruby-regex": {
            "derivatives_prefix": ":relative-path:"
        },
        "cbrain:no-run-id-for-outputs": [ "nibabies_output_dir", "nibabies_html_report", "freesurfer_output_dir", "mcribs_output_dir"],
        "cbrain:integrator_modules": {
            "BoutiquesAllowedExitCodes": [0],
            "BoutiquesFileTypeVerifier": {
                "subject_dir": [ "BidsSubject" ],
                "fs_license_file": [ "FreesurferLicense", "TextFile", "SingleFile" ]
            },
            "BoutiquesFileNameMatcher": {
                "subject_dir": "^sub-[a-zA-Z0-9_]+$"
            },
            "BoutiquesFreesurferLicenseFinder": "fs_license_file",
            "BoutiquesOutputFileTypeSetter": {
                "nibabies_output_dir":  "NibabiesOutput",
                "nibabies_html_report": "NibabiesOutputHtml",
                "freesurfer_output_dir": "NibabiesFreesurferOutput",
                "mcribs_output_dir": "McribsOutput"
            },
            "BoutiquesForcedOutputBrowsePath" : {
              "nibabies_output_dir": "[DERIVATIVES_PREFIX]nibabies",
              "nibabies_html_report": "[DERIVATIVES_PREFIX]nibabies",
              "freesurfer_output_dir": "[DERIVATIVES_PREFIX]freesurfer",
              "mcribs_output_dir": "[DERIVATIVES_PREFIX]mcribs"
            },
            "BoutiquesTaskLogsCopier": {
                "stdout":     "[OUTPUT_DIR]/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/stdout.log",
                "stderr":     "[OUTPUT_DIR]/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/stderr.log",
                "runtime":    "[OUTPUT_DIR]/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/runtime_info.properties",
                "descriptor": "[OUTPUT_DIR]/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/boutiques_descriptor.json",
                "invoke":     "[OUTPUT_DIR]/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/boutiques_invoke.json",
                "jobscript":  "[OUTPUT_DIR]/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/job_script.sh",
                "cbrain_params": "[OUTPUT_DIR]/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/cbrain_params.json"
            },
            "BoutiquesBidsSubjectFileSelector": { "subject_dir": "all_to_keep" },
            "BoutiquesBidsSingleSubjectMaker": "subject_dir",
            "BoutiquesPostProcessingCleaner": [
              "work",
              "[OUTPUT_DIR]"
            ],
            "BoutiquesInputSubdirMaker": {
              "cabinet_output":      {"dirname": "precomputed",                                         "append_filename": false, "physical_copy": true},
              "cabinet_output_json": {"dirname": "precomputed", "filename": "dataset_description.json", "append_filename": false, "physical_copy": true}
            }
        }
    }
}
