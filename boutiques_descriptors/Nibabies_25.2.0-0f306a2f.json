{
    "name":                "nibabies",
    "tool-version":        "25.2.0-0f306a2f",
    "description":         "NiBabies is an open-source software pipeline designed to process anatomical and functional magnetic resonance imaging data.",
    "url":                 "https://nibabies.readthedocs.io/",
    "command-line":        "true [DERIVATIVES_PREFIX]; nibabies [SUBJECT_DIR] [OUTPUT_DIR] participant --skip_bids_validation [SESSION_ID] --nthreads 4 --omp-nthreads 4 --mem_mb 30000 [VERBOSE] [OUTPUT_SPACES] [DUMMY_SCANS] [FS_LICENSE_FILE] [CIFTI_OUTPUT] --work-dir work [STOP_ON_FIRST_CRASH] [CABINET_OUTPUT] [PROJECT_GOODVOXELS] [SURFACE_RECON_METHOD] [MULTI_STEP_REG] [OUTPUT_LAYOUT]",
    "schema-version":      "0.5",
    "container-image":     {
      "image": "nipreps/nibabies:25.2.0",
      "index": "docker://",
      "type":  "singularity"
    },
    "inputs":              [
      {
        "id":          "subject_dir",
        "name":        "subject_dir",
        "description": "Subject folder for BIDS (folders name should be sub-XXXXX).",
        "type":        "File",
        "optional":    false,
        "value-key":   "[SUBJECT_DIR]"
      },
      {
        "id":          "output_dir_name",
        "name":        "output_dir_name",
        "description": "The name of the output for the outcomes of preprocessing and visual reports. When processing is ran via CBRAIN only subject-specific files/folders will be saved, so the naming of the output folder will not influence the final naming/destination of files/folders.",
        "type":        "String",
        "optional":    false,
        "value-key":   "[OUTPUT_DIR]"
      },
      {
        "id":                "session_id",
        "name":              "session_id",
        "description":       "a space delimited list of session identifiers or a single identifier",
        "type":              "String",
        "optional":          true,
        "command-line-flag": "--session-id",
        "value-key":         "[SESSION_ID]"
      },
      {
        "id":                "verbose",
        "name":              "verbose",
        "description":       "Increases log verbosity for each occurence (-vvv).",
        "type":              "Flag",
        "optional":          true,
        "command-line-flag": "-vvv",
        "value-key":         "[VERBOSE]"
      },
      {
        "id":                "output_spaces",
        "name":              "output_spaces",
        "description":       "Standard and non-standard spaces to resample anatomical and functional images to. Standard spaces may be specified by the form <SPACE>[:cohort-<label>][:res-<resolution>][...], where <SPACE> is a keyword designating a spatial reference, and may be followed by optional, colon-separated parameters. Non-standard spaces imply specific orientations and sampling grids. Important to note, the res-* modifier does not define the resolution used for the spatial normalization. To generate no BOLD outputs, use this option without specifying any spatial references For further details, please check out https://fmriprep.readthedocs.io/en/latest/spaces.html",
        "type":              "String",
        "optional":          true,
        "command-line-flag": "--output-spaces",
        "value-key":         "[OUTPUT_SPACES]",
        "value-choices":     [
          "MNI152NLin6Asym:res-2 fsnative anat func"
        ]
      },
      {
        "id":                "dummy_scans",
        "name":              "dummy_scans",
        "description":       "Number of non steady state volumes.",
        "type":              "Number",
        "optional":          true,
        "command-line-flag": "--dummy-scans",
        "value-key":         "[DUMMY_SCANS]",
        "value-choices":     [
          4
        ]
      },
      {
        "id":                "fs_license_file",
        "name":              "fs_license_file",
        "description":       "Path to FreeSurfer license key file. Get it (for free) by registering at https://surfer.nmr.mgh.harvard.edu/registration.html",
        "type":              "File",
        "optional":          true,
        "command-line-flag": "--fs-license-file",
        "value-key":         "[FS_LICENSE_FILE]"
      },
      {
        "id":                "cifti_output",
        "name":              "cifti_output",
        "description":       "Output preprocessed BOLD as a CIFTI dense timeseries. Optionally, the number of grayordinate can be specified (default is 91k, which equates to 2mm resolution). Possible choices 91k, 170k.",
        "type":              "String",
        "optional":          true,
        "command-line-flag": "--cifti-output",
        "value-key":         "[CIFTI_OUTPUT]",
        "value-choices":     [
          "91k"
        ]
      },
      {
        "id":                "stop_on_first_crash",
        "name":              "stop_on_first_crash",
        "description":       "Force stopping on first crash, even if a work directory was specified.",
        "type":              "Flag",
        "optional":          true,
        "command-line-flag": "--stop-on-first-crash",
        "value-key":         "[STOP_ON_FIRST_CRASH]"
      },
      {
        "id":                "cabinet_output",
        "name":              "cabinet_output",
        "description":       "FileCollection containing CABINET precomputed output.",
        "type":              "File",
        "optional":          true,
        "command-line-flag": "--derivatives",
        "value-key":         "[CABINET_OUTPUT]"
      },
      {
        "id":                "project_goodvoxels",
        "name":              "project_goodvoxels",
        "description":       "Remove high variance voxels from surface projection.",
        "type":              "Flag",
        "optional":          true,
        "command-line-flag": "--project-goodvoxels",
        "value-key":         "[PROJECT_GOODVOXELS]"
      },
      {
        "id":                "surface_recon_method",
        "name":              "surface_recon_method",
        "description":       "Method to use for surface reconstruction.",
        "type":              "String",
        "optional":          true,
        "command-line-flag": "--surface-recon-method",
        "value-key":         "[SURFACE_RECON_METHOD]",
        "value-choices":     [
          "mcribs"
        ]
      },
      {
        "id":                "output_layout",
        "name":              "output_layout",
        "description":       "Organization of outputs.",
        "type":              "String",
        "optional":          true,
        "command-line-flag": "--output-layout",
        "value-key":         "[OUTPUT_LAYOUT]",
        "value-choices":     [
          "multiverse"
        ]
      },
      {
        "id":                "multi_step_reg",
        "name":              "multi_step_reg",
        "description":       "For certain adult templates (MNI152NLin6Asym), perform two step registrations (native -> MNIInfant -> template) and concatenate into a single xfm.",
        "type":              "Flag",
        "optional":          true,
        "command-line-flag": "--multi-step-reg",
        "value-key":         "[MULTI_STEP_REG]"
      },
      {
        "id":          "cabinet_output_json",
        "name":        "cabinet_output_json",
        "description": "The json descriptor of the CABINET precomputed output.",
        "type":        "File",
        "optional":    true
      },
      {
        "id":            "derivatives_prefix",
        "name":          "derivatives_prefix",
        "description":   "Folders to put before the pipeline specific folder. By default this will look like DataProvider/derivatives/PipelineName, where pipeline name is specific to the current pipeline. The provided string must end in /",
        "type":          "String",
        "optional":      true,
        "default-value": "derivatives/",
        "value-key":     "[DERIVATIVES_PREFIX]"
      }
    ],
    "output-files":        [
      {
        "id":            "nibabies_output_dir",
        "name":          "NiBabies Output Directory",
        "description":   "This is the directory where the nibabies outputs are to be stored.",
        "optional":      false,
        "path-template": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/[SUBJECT_DIR]"
      },
      {
        "id":            "freesurfer_output_dir",
        "name":          "FreeSurfer Output Directory",
        "description":   "This is the directory where the freesurfer-like outputs are to be stored.",
        "optional":      false,
        "path-template": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/sourcedata/freesurfer-0f306a2f/[SUBJECT_DIR]*"
      },
      {
        "id":            "mcribs_output_dir",
        "name":          "MCRIBS Output Directory",
        "description":   "This is the directory where the mcribs outputs are to be stored.",
        "optional":      false,
        "path-template": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/sourcedata/mcribs-0f306a2f/[SUBJECT_DIR]*"
      },
      {
        "id":            "nibabies_html_report",
        "name":          "nibabies html report",
        "description":   "This is the html report generated by nibabies.",
        "optional":      false,
        "path-template": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/[SUBJECT_DIR]*.html"
      }
    ],
    "suggested-resources": {
      "cpu-cores": 4,
      "ram": 60,
      "walltime-estimate": 72000
    },
    "tags":                {
      "application-type": [
        "bids"
      ],
      "domain": [
        "neuroinformatics",
        "fmri",
        "infant"
      ],
      "status": "example"
    },
    "custom":              {
      "cbrain:readonly-input-files":  true,
      "cbrain:author":                "Erik Lee <leex6144@umn.edu>, Timothy Hendrickson <hendr522@umn.edu> and Natacha Beck <nbeck@mcin.ca>",
      "cbrain:allow_empty_strings":   [
        "derivatives_prefix"
      ],
      "cbrain:override-string-input-ruby-regex": {
        "derivatives_prefix": ":relative-path:"
      },
      "cbrain:no-run-id-for-outputs": [
        "nibabies_output_dir",
        "nibabies_html_report",
        "freesurfer_output_dir",
        "mcribs_output_dir"
      ],
      "cbrain:integrator_modules":    {
        "BoutiquesAllowedExitCodes": [
          0
        ],
        "BoutiquesFileTypeVerifier": {
          "subject_dir": [
            "BidsSubject"
          ],
          "fs_license_file": [
            "FreesurferLicense",
            "TextFile",
            "SingleFile"
          ]
        },
        "BoutiquesFileNameMatcher": {
          "subject_dir": "^sub-[a-zA-Z0-9_]+$"
        },
        "BoutiquesFreesurferLicenseFinder": "fs_license_file",
        "BoutiquesOutputFileTypeSetter": {
          "nibabies_output_dir": "NibabiesOutput",
          "nibabies_html_report": "NibabiesOutputHtml",
          "freesurfer_output_dir": "NibabiesFreesurferOutput",
          "mcribs_output_dir": "McribsOutput"
        },
        "BoutiquesOutputTagger" : {"nibabies_output_dir" : ["25.2.0-0f306a2f"],
                                   "nibabies_html_report": ["25.2.0-0f306a2f"],
                                   "freesurfer_output_dir":["25.2.0-0f306a2f"],
                                   "mcribs_output_dir":["25.2.0-0f306a2f"]},
        "BoutiquesForcedOutputBrowsePath": {
          "nibabies_output_dir": "[DERIVATIVES_PREFIX]nibabies-25.2.0-0f306a2f",
          "nibabies_html_report": "[DERIVATIVES_PREFIX]nibabies-25.2.0-0f306a2f",
          "freesurfer_output_dir": "[DERIVATIVES_PREFIX]freesurfer-0f306a2f",
          "mcribs_output_dir": "[DERIVATIVES_PREFIX]mcribs-0f306a2f"
        },
        "BoutiquesTaskLogsCopier": {
          "stdout": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/stdout.log",
          "stderr": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/stderr.log",
          "runtime": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/runtime_info.properties",
          "descriptor": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/boutiques_descriptor.json",
          "invoke": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/boutiques_invoke.json",
          "jobscript": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/job_script.sh",
          "cbrain_params": "[OUTPUT_DIR]/nibabies-25.2.0-0f306a2f/[SUBJECT_DIR]/ses-[SESSION_ID]/.cbrain/cbrain_params.json"
        },
        "BoutiquesBidsSubjectFileSelector": {
          "subject_dir": "all_to_keep"
        },
        "BoutiquesBidsSingleSubjectMaker": "subject_dir",
        "BoutiquesPostProcessingCleaner": [
          "work",
          "[OUTPUT_DIR]"
        ],
        "BoutiquesOutputCacheCleaner": [
          "freesurfer_output_dir",
          "mcribs_output_dir"
        ],
        "BoutiquesInputSubdirMaker": {
          "cabinet_output": {
            "dirname": "precomputed",
            "append_filename": false,
            "physical_copy": true
          },
          "cabinet_output_json": {
            "dirname": "precomputed",
            "filename": "dataset_description.json",
            "append_filename": false,
            "physical_copy": true
          }
        }
      }
    }
  }
